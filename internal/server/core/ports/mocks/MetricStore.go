// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/kberestov/metrics-tpl/internal/common/domain"
	mock "github.com/stretchr/testify/mock"
)

// MetricStore is an autogenerated mock type for the MetricStore type
type MetricStore struct {
	mock.Mock
}

// GetValue provides a mock function with given fields: n
func (_m *MetricStore) GetValue(n domain.MetricName) (domain.MetricValue, error) {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for GetValue")
	}

	var r0 domain.MetricValue
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.MetricName) (domain.MetricValue, error)); ok {
		return rf(n)
	}
	if rf, ok := ret.Get(0).(func(domain.MetricName) domain.MetricValue); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.MetricValue)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.MetricName) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveValue provides a mock function with given fields: n, v
func (_m *MetricStore) SaveValue(n domain.MetricName, v domain.MetricValue) error {
	ret := _m.Called(n, v)

	if len(ret) == 0 {
		panic("no return value specified for SaveValue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.MetricName, domain.MetricValue) error); ok {
		r0 = rf(n, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMetricStore creates a new instance of MetricStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricStore {
	mock := &MetricStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
